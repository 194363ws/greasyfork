(function() {

	function hookUpSelectAllCheckboxes() {
		function updateAllCheckboxSelection(selection) {
			var checkboxes = document.querySelectorAll("input[type='checkbox']");
			for (var i = 0; i < checkboxes.length; i++) {
				checkboxes[i].checked = selection;
			}
		}
		var selectAll = document.querySelector(".select-all");
		if (selectAll) {
			selectAll.addEventListener("click", function(event) { updateAllCheckboxSelection(true); event.preventDefault();});
			selectAll.style.display = "inline";
		}
		var selectNone = document.querySelector(".select-none");
		if (selectNone) {
			selectNone.addEventListener("click", function(event) { updateAllCheckboxSelection(false); event.preventDefault();});
			selectNone.style.display = "inline";
		}
	}

	function hookUpInstallPingers() {
		var installLink = document.querySelector(".install-link");
		if (!installLink) {
			return;
		}
		installLink.addEventListener("click", function(event) {
			if (installLink.getAttribute("data-is-previous-version") == "true") {
				if (!confirm("This is not the latest version of this script. If you install it, you will never be updated to a newer version. Install anyway?")) {
					event.preventDefault();
					return;
				}
			}
			var xhr = new XMLHttpRequest();
			xhr.open("POST", event.target.getAttribute("data-ping-url"), true);
			xhr.overrideMimeType("text/plain");
			xhr.send();
		});
	}

	// on user input element:
	// class = previewable
	// data-markup-option-name = the name of the radio buttons for selecting markup
	// data-preview-activate-id = the id of the button to activate the preview
	// data-preview-result-id = the id of the div to place the results
	function hookUpMarkupPreview() {
		$(".previewable").each(function(index, previewable) {
			var previewable = $(this);
			var markupOptions = $('input:radio[name="' + previewable.attr("data-markup-option-name") + '"]');
			var button = $("#" + previewable.attr("data-preview-activate-id"));

			button.show();

			// This function will get called when new additional infos are added. To prevent multiple calls on existing ones, unbind and then rebind.

			button.unbind("click", handlePreviewClick);
			button.click(handlePreviewClick);

			// close when anything changed
			markupOptions.unbind("click", handlePreviewInput);
			markupOptions.click(handlePreviewInput);
			previewable.unbind('input', handlePreviewInput);
			previewable.bind('input', handlePreviewInput);
		});
	}

	function handlePreviewClick(event) {
		var previewable = $(event.target).parents(".form-control").first().find(".previewable");
		var markupOptions = $('input:radio[name="' + previewable.attr("data-markup-option-name") + '"]');
		var result = $("#" + previewable.attr("data-preview-result-id"));

		var selectedMarkup = $('input:radio[name="' + previewable.attr("data-markup-option-name") + '"]:checked').val();
		$.ajax({
			type: "POST",
			url: "/preview-markup",
			data: {
				text: previewable.val(),
				markup: selectedMarkup
			},
			success: function(data) {
				result.html(data);
				result.slideDown();
				// scroll to it if it's not at all visible
				if (result.offset().top > $(window).scrollTop() + $(window).height()) {
					$('html, body').animate({
						scrollTop: result.offset().top
					}, 2000);
				}
			},
			error: function(data) {
				alert(data);
				return false;
			}
		})
		return false;
	}

	function handlePreviewInput(event) {
		var result = $(event.target).parents(".form-control").first().find(".preview-result");
		result.slideUp();
	}

	function hookUpAddLocalizedAdditionalInfo() {
		var button = document.getElementById("add-additional-info");
		if (!button) {
			return;
		}
		button.addEventListener("click", function(event) {
			// Get the next index to use
			var additionalInfos = document.querySelectorAll("textarea[name*='additional_info']");
			var lastAdditionalInfoNameParts = additionalInfos[additionalInfos.length - 1].id.split("-")
			var index = parseInt(lastAdditionalInfoNameParts[lastAdditionalInfoNameParts.length - 1], 10) + 1;

			var xhr = new XMLHttpRequest();
			xhr.overrideMimeType("text/html");
			xhr.open("get", "<%=Greasyfork::Application.routes.url_helpers.script_version_additional_info_form_path%>" + "?index=" + index);
			xhr.onload = function() {
				var frag = document.createElement("div");
				frag.innerHTML = this.responseText;
				button.parentNode.parentNode.insertBefore(frag.firstChild, button.parentNode);
				// Make the preview button work
				hookUpMarkupPreview();
			};
			xhr.send();
			event.preventDefault();
		});
	}

	function hookUpLocaleSwitcher() {
		document.getElementById("language-selector-locale").addEventListener("change", function(event) {
			var selectedOption = event.target.selectedOptions[0];
			if (selectedOption.value == "help") {
				location.href = "<%=Rails.configuration.help_translate_url%>";
			} else {
				location.href = selectedOption.getAttribute("data-language-url");
			}
		});
	}

	function hookUpBrowserId() {
		var browserIdLink = document.querySelector(".browser_id-login");
		if (browserIdLink) {
			browserIdLink.addEventListener("click", function(event) {
				navigator.id.get(function(assertion) {
					var returnToParam = event.target.hasAttribute("data-return-to") ? ("&origin=" + event.target.getAttribute("data-return-to")) : "";
					returnToParam += (document.getElementById("remember_me").checked ? "&remember_me=1" : "");
					if (assertion) {
						location.href = "<%=Greasyfork::Application.routes.url_helpers.omniauth_callback_path(:provider => 'browser_id')%>?assertion=" + encodeURIComponent(assertion) + returnToParam;
					} else {
						location.href = "<%=Greasyfork::Application.routes.url_helpers.omniauth_callback_path(:provider => 'browser_id')%>?failure=1"+ returnToParam;
					}
				});
				event.preventDefault();
			});
		}
	}

	function init() {
		hookUpSelectAllCheckboxes();
		hookUpInstallPingers();
		hookUpMarkupPreview();
		hookUpLocaleSwitcher();
		hookUpBrowserId();
		hookUpAddLocalizedAdditionalInfo();
	}
	
	window.addEventListener("DOMContentLoaded", init);
})();
